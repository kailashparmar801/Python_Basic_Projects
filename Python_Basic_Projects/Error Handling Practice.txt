1)Handling ZeroDivisionError

Create a function safe_division() that takes two arguments a and b and returns the result of a / b. 
Handle the ZeroDivisionError using a try-except block if the given denominator i.e. b is zero. 
Return Cannot divide by zero! if an error occurs.

Answer:- def safe_division(a, b):
    try:
        result = a / b
        return result
    except ZeroDivisionError:
        return "Cannot divide by zero!"

# Test cases
print(safe_division(10, 2))  # Output: 5.0
print(safe_division(5, 0))   # Output: Cannot divide by zero!
print(safe_division(10, 3)) # Output: 3.3333333333333335
print(safe_division(0, 5)) # Output: 0.0

********************************************

2)Handling ValueError in Input Conversion

Create a function convert_to_int() that takes a string as an argument and returns an integer. 
Use a try-except block to catch the ValueError. Return Invalid input! if an error occurs.

Answer:- def convert_to_int(input_string):
    try:
        integer_value = int(input_string)
        return integer_value
    except ValueError:
        return "Invalid input!"

# Test cases
print(convert_to_int("123"))   # Output: 123
print(convert_to_int("abc"))   # Output: Invalid input!
print(convert_to_int("3.14"))  # Output: Invalid input!
print(convert_to_int("-42"))  # Output: -42
print(convert_to_int("0")) # Output: 0

********************************************

3)Handling Multiple Exceptions

Create a function safe_input_division() that takes two arguments a as string and bas float. Type cast a and b into integer. 
Use a try-except block to catch both exceptions, ValueError and ZeroDivisionError. 
Return Invalid input! for ValueError and Cannot divide by zero! for ZeroDivisionError.

Answer:- def safe_input_division(a, b):
    try:
        return int(a) / int(b)
    except ValueError:
        return "Invalid input!"
    except ZeroDivisionError:
        return "Cannot divide by zero!"

********************************************

4)Raising ValueError

Create a function check_positive() that takes a number as an argument. 
If the number is negative, raise a ValueError with the message Negative numbers are not allowed. 
For a positive number, return Valid number.

Answer:- def check_positive(num):
    if num < 0:
        raise ValueError("Negative numbers are not allowed")
    return "Valid number"

********************************************

5)Invalid Age Input

Create a function check_age(age) that takes an integer input and raises a ValueError with message Age cannot be negative, if the age is less than 0. 
Return Age is valid, if the age is greater than or equal to 0.

Answer:- def check_age(age):
    if age < 0:
        raise ValueError("Age cannot be negative")
    return "Age is valid"

# Test cases
print(check_age(25))  # Output: Age is valid
try:
    print(check_age(-5))  # This will raise a ValueError
except ValueError as e:
    print(e)  # Output: Age cannot be negative
print(check_age(0)) # Output: Age is valid
try:
    print(check_age(-1))  # This will raise a ValueError
except ValueError as e:
    print(e)  # Output: Age cannot be negative

********************************************

6)Catching TypeError

Create a function safe_addition(a, b) that takes two inputs a and b, return the sum of a and b using try block. Otherwise, except a TypeError and return Type mismatch!.

Answer:- def safe_addition(a, b):
    try:
        return a + b
    except TypeError:
        return "Type mismatch!"

********************************************

7)Handling AttributeError

Create a function call_invalid_method() that takes integer argument value as input and calls the non-existent method invalid_method() on an integer. 
Except the AttributeError and return Invalid operation!.

Answer:- def call_invalid_method(value):
    try:
        # Attempt to call a non-existent method on the integer
        value.invalid_method()  # This will raise an AttributeError
        return "Method called successfully (this won't happen)" # This line will not be executed.
    except AttributeError:
        return "Invalid operation!"

# Test cases
print(call_invalid_method(5))  # Output: Invalid operation!
print(call_invalid_method(10)) # Output: Invalid operation!
print(call_invalid_method(-2)) # Output: Invalid operation!

********************************************

8)Invalid Email Format

Create a function validate_email(email) that takes an email as input and raises a ValueError as Invalid email format if the email does not contain an @ symbol. 
Return Email is valid if the email is valid.

Answer:- def validate_email(email):
    if "@" not in email:
        raise ValueError("Invalid email format")
    return "Email is valid"

# Test cases
print(validate_email("test@example.com"))  # Output: Email is valid
try:
    print(validate_email("testexample.com"))  # This will raise a ValueError
except ValueError as e:
    print(e)  # Output: Invalid email format
print(validate_email("another.test@domain.net"))  # Output: Email is valid
try:
    print(validate_email("noat.symbol"))  # This will raise a ValueError
except ValueError as e:
    print(e)  # Output: Invalid email format

********************************************

9)Using finally block to Ensure Cleanup

Create a function cleanup_example(). Declare a variable var and assign a value In use. 
Raise an exception with message Some error in try block. In finally block, assign a value Cleaned to var and return var

Answer:- def cleanup_example():
    var = "In use"
    try:
        raise Exception("Some error")  # Raise an exception
    finally:
        var = "Cleaned"  # Assign a new value in the finally block
        return var

# Test case
result = cleanup_example()
print(result)  # Output: Cleaned

********************************************

10)Nested Try-Except Blocks

Create a function nested_error_handling() that takes a string as an argument and returns a integer. 
Use nested try-except block, if the string is not a valid number, catch a ValueError and 
raise TypeError with the message Inner Type Error for inner except block and catch TypeError at outer except block and return Handled in outer block.

# complete the given code
def nested_error_handling(...):
    try:
        try:
            ...
        except ...

Answer:- def nested_error_handling(input_string):
    try:
        try:
            integer_value = int(input_string)
            return integer_value
        except ValueError:
            raise TypeError("Inner Type Error")  # Raise TypeError in the inner except
    except TypeError:
        return "Handled in outer block"

# Test cases
print(nested_error_handling("123"))   # Output: 123
print(nested_error_handling("abc"))   # Output: Handled in outer block
print(nested_error_handling("3.14"))  # Output: Handled in outer block
print(nested_error_handling("-42"))  # Output: -42
print(nested_error_handling("0")) # Output: 0

********************************************

11)Handle Empty String

Create a function check_empty_string(s) that takes a string as input. 
Raises a ValueError with message String cannot be empty! if the string is empty. Return String is valid if the string is not empty.

Answer:- def check_empty_string(s):
    if not s:  # Check if the string is empty (empty string evaluates to False in a boolean context)
        raise ValueError("String cannot be empty!")
    return "String is valid"

# Test cases
print(check_empty_string("hello"))  # Output: String is valid
try:
    print(check_empty_string(""))  # This will raise a ValueError
except ValueError as e:
    print(e)  # Output: String cannot be empty!
print(check_empty_string(" ")) # Output: String is valid (space is not an empty string)
try:
    print(check_empty_string("   "))  # This will raise a ValueError
except ValueError as e:
    print(e)  # Output: String cannot be empty!

********************************************

12)Combining Try-Except-Else-Finally

Write a function complete_error_handling() that takes two arguments a and b. Divide a by b and store the result in a variable result. 
Use try-except-else-finally block to catch the ZeroDivisionError and return Cannot divide by zero!. If no error occurs, return the variable result. Finally, print Operation completed!.

Answer:- def complete_error_handling(a, b):
    try:
        result = a / b
    except ZeroDivisionError:
        return "Cannot divide by zero!"
    else:  # The else block executes if NO exception occurs in the try block
        return result
    finally:
        print("Operation completed!")

# Test cases
print(complete_error_handling(10, 2))  # Output: 5.0, Operation completed!
print(complete_error_handling(5, 0))   # Output: Cannot divide by zero!, Operation completed!
print(complete_error_handling(15, 3)) # Output: 5.0, Operation completed!
print(complete_error_handling(7, 2)) # Output: 3.5, Operation completed!

********************************************

13)Custom Exception for Invalid Password Length

Create validate_password() function that takes a password as an argument and raises a custom InvalidPasswordError if the password length is less than 8 characters. 
Print Password must be at least 8 characters long! if an error occurs. And return Password is valid if the password is valid.

class InvalidPasswordError(Exception):
    pass

def validate_password(password):
    # write your code here

Answer:- class InvalidPasswordError(Exception):
    pass

def validate_password(password):
    if len(password) < 8:
        raise InvalidPasswordError("Password must be at least 8 characters long!")
    return "Password is valid"

# Test cases
print(validate_password("P@$$wOrd"))  # Output: Password is valid
try:
    print(validate_password("short"))  # This will raise InvalidPasswordError
except InvalidPasswordError as e:
    print(e)  # Output: Password must be at least 8 characters long!
print(validate_password("MyStrongPassword123"))  # Output: Password is valid
try:
    print(validate_password("weak"))  # This will raise InvalidPasswordError
except InvalidPasswordError as e:
    print(e)  # Output: Password must be at least 8 characters long!

********************************************

14)Substring Not Found

Write a function find_substring(s, sub) that takes a string s and a substring sub as input. 
Except ValueError with message Substring not found! if the substring is not found in the string. Return Substring found at index {index} if the substring is found.

Answer:- def find_substring(string, substring):
    try:
        index = string.index(substring)
        return f"Substring found at index {index}"
    except ValueError:
        return "Substring not found!"

********************************************

15)Check Boolean Input Validation

Write a function validate_boolean(b) that takes a boolean input and raises a TypeError with message Value must be a boolean! if the input is not a boolean. 
Return Boolean is valid if the input is valid.

Answer:- def validate_boolean(b):
    if not isinstance(b, bool):  # Check if b is NOT a boolean using isinstance
        raise TypeError("Value must be a boolean!")
    return "Boolean is valid"

# Test cases
print(validate_boolean(True))   # Output: Boolean is valid
print(validate_boolean(False))  # Output: Boolean is valid
try:
    print(validate_boolean(1))  # This will raise TypeError
except TypeError as e:
    print(e)  # Output: Value must be a boolean!
try:
    print(validate_boolean("True"))  # This will raise TypeError
except TypeError as e:
    print(e)  # Output: Value must be a boolean!
try:
    print(validate_boolean(None))  # This will raise TypeError
except TypeError as e:
    print(e)  # Output: Value must be a boolean!

********************************************

16)Using else with Try Block

Create a function divide_numbers() that takes two arguments a and b. 
Use a try-except-else block to catch the ZeroDivisionError and return Cannot divide by zero!. 

If no error occurs, return the result of a/b.

Answer:- def divide_numbers(a, b):
    try:
        result = a / b
    except ZeroDivisionError:
        return "Cannot divide by zero!"
    else:  # The else block executes only if NO exception occurs in the try block
        return result

# Test cases
print(divide_numbers(10, 2))  # Output: 5.0
print(divide_numbers(5, 0))   # Output: Cannot divide by zero!
print(divide_numbers(15, 3))  # Output: 5.0
print(divide_numbers(7, 2))   # Output: 3.5